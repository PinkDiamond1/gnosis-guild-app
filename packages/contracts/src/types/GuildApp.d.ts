/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GuildAppInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approvedTokens()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getMetadata()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getSubscriptionExpiryFor(address)": FunctionFragment;
    "getSubscriptionIdFor(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "guildBalance(address)": FunctionFragment;
    "hasActiveSubscription(address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,uint256,uint256,tuple,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "isActive()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isSubscriptionOwner(uint256,address)": FunctionFragment;
    "metadataCID()": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pauseGuild(bool)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setMetadata(string)": FunctionFragment;
    "subPrice()": FunctionFragment;
    "subscribe(address,string,uint256,bytes)": FunctionFragment;
    "subscriptionByOwner(address)": FunctionFragment;
    "subscriptionPeriod()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unsubscribe(uint256)": FunctionFragment;
    "updateSubscriptionPrice(address,uint256)": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionExpiryFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionIdFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "guildBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasActiveSubscription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      { name: string; symbol: string; baseURI: string; metadataCID: string },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscriptionOwner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataCID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pauseGuild", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setMetadata", values: [string]): string;
  encodeFunctionData(functionFragment: "subPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionExpiryFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionIdFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guildBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasActiveSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscriptionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseGuild", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "InitializedGuild(address,address,uint256,uint256,tuple)": EventFragment;
    "NewSubscription(address,uint256,uint256,uint256,bytes)": EventFragment;
    "PausedGuild(bool)": EventFragment;
    "RenewSubscription(address,uint256,uint256,uint256,bytes)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SubscriptionPriceChanged(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unsubscribed(uint256)": EventFragment;
    "UpdatedMetadata(string)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitializedGuild"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedGuild"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RenewSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionPriceChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unsubscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMetadata"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class GuildApp extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GuildAppInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approvedTokens(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "approvedTokens()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    baseURI(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "baseURI()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getMetadata(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getMetadata()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSubscriptionExpiryFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSubscriptionExpiryFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSubscriptionIdFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSubscriptionIdFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    guildBalance(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "guildBalance(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    hasActiveSubscription(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasActiveSubscription(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    initialize(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,uint256,tuple,address)"(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "initialized()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    isActive(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "isActive()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isSubscriptionOwner(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isSubscriptionOwner(uint256,address)"(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    metadataCID(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "metadataCID()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    name(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "name()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pauseGuild(
      pause: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pauseGuild(bool)"(
      pause: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMetadata(
      _metadataCID: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMetadata(string)"(
      _metadataCID: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    subPrice(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "subPrice()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    subscribe(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "subscribe(address,string,uint256,bytes)"(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    subscriptionByOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenId: BigNumber;
      expirationTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "subscriptionByOwner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenId: BigNumber;
      expirationTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    subscriptionPeriod(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "subscriptionPeriod()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    symbol(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "symbol()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenAddress(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "tokenAddress()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unsubscribe(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unsubscribe(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateSubscriptionPrice(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateSubscriptionPrice(address,uint256)"(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,address)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approvedTokens(overrides?: CallOverrides): Promise<string[]>;

  "approvedTokens()"(overrides?: CallOverrides): Promise<string[]>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  "baseURI()"(overrides?: CallOverrides): Promise<string>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMetadata(overrides?: CallOverrides): Promise<string>;

  "getMetadata()"(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubscriptionExpiryFor(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSubscriptionExpiryFor(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubscriptionIdFor(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSubscriptionIdFor(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  guildBalance(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "guildBalance(address)"(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasActiveSubscription(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasActiveSubscription(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _creator: string,
    _tokenAddress: string,
    _subPrice: BigNumberish,
    _subscriptionPeriod: BigNumberish,
    _metadata: {
      name: string;
      symbol: string;
      baseURI: string;
      metadataCID: string;
    },
    allowanceModule: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,uint256,tuple,address)"(
    _creator: string,
    _tokenAddress: string,
    _subPrice: BigNumberish,
    _subscriptionPeriod: BigNumberish,
    _metadata: {
      name: string;
      symbol: string;
      baseURI: string;
      metadataCID: string;
    },
    allowanceModule: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  "initialized()"(overrides?: CallOverrides): Promise<boolean>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  "isActive()"(overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSubscriptionOwner(
    _tokenId: BigNumberish,
    _holder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isSubscriptionOwner(uint256,address)"(
    _tokenId: BigNumberish,
    _holder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  metadataCID(overrides?: CallOverrides): Promise<string>;

  "metadataCID()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pauseGuild(
    pause: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pauseGuild(bool)"(
    pause: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMetadata(
    _metadataCID: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMetadata(string)"(
    _metadataCID: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  subPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "subPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  subscribe(
    _subscriber: string,
    _tokenURI: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "subscribe(address,string,uint256,bytes)"(
    _subscriber: string,
    _tokenURI: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  subscriptionByOwner(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    tokenId: BigNumber;
    expirationTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "subscriptionByOwner(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    tokenId: BigNumber;
    expirationTimestamp: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  subscriptionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "subscriptionPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  "tokenAddress()"(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenOfOwnerByIndex(address,uint256)"(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unsubscribe(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unsubscribe(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateSubscriptionPrice(
    _tokenAddress: string,
    _newSubPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateSubscriptionPrice(address,uint256)"(
    _tokenAddress: string,
    _newSubPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _tokenAddress: string,
    _amount: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,address)"(
    _tokenAddress: string,
    _amount: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedTokens(overrides?: CallOverrides): Promise<string[]>;

    "approvedTokens()"(overrides?: CallOverrides): Promise<string[]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    "baseURI()"(overrides?: CallOverrides): Promise<string>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMetadata(overrides?: CallOverrides): Promise<string>;

    "getMetadata()"(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionExpiryFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscriptionExpiryFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionIdFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscriptionIdFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    guildBalance(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "guildBalance(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasActiveSubscription(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasActiveSubscription(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,uint256,tuple,address)"(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    "initialized()"(overrides?: CallOverrides): Promise<boolean>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    "isActive()"(overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSubscriptionOwner(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isSubscriptionOwner(uint256,address)"(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    metadataCID(overrides?: CallOverrides): Promise<string>;

    "metadataCID()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pauseGuild(pause: boolean, overrides?: CallOverrides): Promise<void>;

    "pauseGuild(bool)"(
      pause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadata(_metadataCID: string, overrides?: CallOverrides): Promise<void>;

    "setMetadata(string)"(
      _metadataCID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    subPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "subPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    subscribe(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "subscribe(address,string,uint256,bytes)"(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionByOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenId: BigNumber;
      expirationTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "subscriptionByOwner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      tokenId: BigNumber;
      expirationTimestamp: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    subscriptionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "subscriptionPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    "tokenAddress()"(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unsubscribe(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unsubscribe(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubscriptionPrice(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSubscriptionPrice(address,uint256)"(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256,address)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    InitializedGuild(
      _creator: null,
      _tokenAddress: null,
      _subPrice: null,
      _subscriptionPeriod: null,
      _metadata: null
    ): EventFilter;

    NewSubscription(
      _subscriber: null,
      _tokenId: null,
      _value: null,
      expiry: null,
      _data: null
    ): EventFilter;

    PausedGuild(_isPaused: null): EventFilter;

    RenewSubscription(
      _subscriber: null,
      _tokenId: null,
      _value: null,
      expiry: null,
      _data: null
    ): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    SubscriptionPriceChanged(_tokenAddress: null, _subPrice: null): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    Unsubscribed(_tokenId: null): EventFilter;

    UpdatedMetadata(_metadataURI: null): EventFilter;

    Withdraw(
      _tokenAddress: null,
      beneficiary: null,
      _amount: null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approvedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "approvedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    "baseURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    "getMetadata()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionExpiryFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscriptionExpiryFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionIdFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscriptionIdFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    guildBalance(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "guildBalance(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasActiveSubscription(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasActiveSubscription(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,uint256,tuple,address)"(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    "initialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    "isActive()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSubscriptionOwner(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSubscriptionOwner(uint256,address)"(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadataCID(overrides?: CallOverrides): Promise<BigNumber>;

    "metadataCID()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseGuild(pause: boolean, overrides?: Overrides): Promise<BigNumber>;

    "pauseGuild(bool)"(
      pause: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMetadata(
      _metadataCID: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMetadata(string)"(
      _metadataCID: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    subPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "subPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    subscribe(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "subscribe(address,string,uint256,bytes)"(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    subscriptionByOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "subscriptionByOwner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscriptionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "subscriptionPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unsubscribe(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unsubscribe(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateSubscriptionPrice(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateSubscriptionPrice(address,uint256)"(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,address)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approvedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "approvedTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMetadata()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionExpiryFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubscriptionExpiryFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionIdFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubscriptionIdFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    guildBalance(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "guildBalance(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasActiveSubscription(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasActiveSubscription(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,uint256,tuple,address)"(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isActive()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSubscriptionOwner(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSubscriptionOwner(uint256,address)"(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadataCID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "metadataCID()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseGuild(
      pause: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pauseGuild(bool)"(
      pause: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMetadata(
      _metadataCID: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMetadata(string)"(
      _metadataCID: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    subPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "subPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    subscribe(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "subscribe(address,string,uint256,bytes)"(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    subscriptionByOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subscriptionByOwner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscriptionPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "subscriptionPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenOfOwnerByIndex(address,uint256)"(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unsubscribe(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unsubscribe(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateSubscriptionPrice(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateSubscriptionPrice(address,uint256)"(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,address)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
