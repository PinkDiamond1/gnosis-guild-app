/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IGuildInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "approvedTokens()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getMetadata()": FunctionFragment;
    "getSubscriptionExpiryFor(address)": FunctionFragment;
    "getSubscriptionIdFor(address)": FunctionFragment;
    "guildBalance(address)": FunctionFragment;
    "hasActiveSubscription(address)": FunctionFragment;
    "initialize(address,address,uint256,uint256,tuple,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isSubscriptionOwner(uint256,address)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pauseGuild(bool)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setMetadata(string)": FunctionFragment;
    "subscribe(address,string,uint256,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unsubscribe(uint256)": FunctionFragment;
    "updateSubscriptionPrice(address,uint256)": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionExpiryFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionIdFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "guildBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasActiveSubscription",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      { name: string; symbol: string; baseURI: string; metadataCID: string },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscriptionOwner",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pauseGuild", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setMetadata", values: [string]): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSubscriptionPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approvedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionExpiryFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionIdFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "guildBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasActiveSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscriptionOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseGuild", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSubscriptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class IGuild extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IGuildInterface;

  functions: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approvedTokens(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "approvedTokens()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      balance: BigNumber;
      0: BigNumber;
    }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      operator: string;
      0: string;
    }>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      operator: string;
      0: string;
    }>;

    getMetadata(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "getMetadata()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    getSubscriptionExpiryFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSubscriptionExpiryFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getSubscriptionIdFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getSubscriptionIdFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    guildBalance(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "guildBalance(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    hasActiveSubscription(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "hasActiveSubscription(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    initialize(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,uint256,uint256,tuple,address)"(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "initialized()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isSubscriptionOwner(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isSubscriptionOwner(uint256,address)"(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      0: string;
    }>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      0: string;
    }>;

    pauseGuild(
      pause: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "pauseGuild(bool)"(
      pause: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMetadata(
      _metadataCID: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMetadata(string)"(
      _metadataCID: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    subscribe(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "subscribe(address,string,uint256,bytes)"(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unsubscribe(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unsubscribe(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateSubscriptionPrice(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateSubscriptionPrice(address,uint256)"(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,address)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approvedTokens(overrides?: CallOverrides): Promise<string[]>;

  "approvedTokens()"(overrides?: CallOverrides): Promise<string[]>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMetadata(overrides?: CallOverrides): Promise<string>;

  "getMetadata()"(overrides?: CallOverrides): Promise<string>;

  getSubscriptionExpiryFor(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSubscriptionExpiryFor(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubscriptionIdFor(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSubscriptionIdFor(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  guildBalance(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "guildBalance(address)"(
    _tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasActiveSubscription(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasActiveSubscription(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _creator: string,
    _tokenAddress: string,
    _subPrice: BigNumberish,
    _subscriptionPeriod: BigNumberish,
    _metadata: {
      name: string;
      symbol: string;
      baseURI: string;
      metadataCID: string;
    },
    allowanceModule: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,uint256,uint256,tuple,address)"(
    _creator: string,
    _tokenAddress: string,
    _subPrice: BigNumberish,
    _subscriptionPeriod: BigNumberish,
    _metadata: {
      name: string;
      symbol: string;
      baseURI: string;
      metadataCID: string;
    },
    allowanceModule: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  "initialized()"(overrides?: CallOverrides): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSubscriptionOwner(
    _tokenId: BigNumberish,
    _holder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isSubscriptionOwner(uint256,address)"(
    _tokenId: BigNumberish,
    _holder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pauseGuild(
    pause: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "pauseGuild(bool)"(
    pause: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    _approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    _approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMetadata(
    _metadataCID: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMetadata(string)"(
    _metadataCID: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  subscribe(
    _subscriber: string,
    _tokenURI: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "subscribe(address,string,uint256,bytes)"(
    _subscriber: string,
    _tokenURI: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unsubscribe(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unsubscribe(uint256)"(
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateSubscriptionPrice(
    _tokenAddress: string,
    _newSubPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateSubscriptionPrice(address,uint256)"(
    _tokenAddress: string,
    _newSubPrice: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _tokenAddress: string,
    _amount: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,address)"(
    _tokenAddress: string,
    _amount: BigNumberish,
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedTokens(overrides?: CallOverrides): Promise<string[]>;

    "approvedTokens()"(overrides?: CallOverrides): Promise<string[]>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMetadata(overrides?: CallOverrides): Promise<string>;

    "getMetadata()"(overrides?: CallOverrides): Promise<string>;

    getSubscriptionExpiryFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscriptionExpiryFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionIdFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscriptionIdFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guildBalance(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "guildBalance(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasActiveSubscription(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasActiveSubscription(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,uint256,uint256,tuple,address)"(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    "initialized()"(overrides?: CallOverrides): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSubscriptionOwner(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isSubscriptionOwner(uint256,address)"(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pauseGuild(pause: boolean, overrides?: CallOverrides): Promise<void>;

    "pauseGuild(bool)"(
      pause: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadata(_metadataCID: string, overrides?: CallOverrides): Promise<void>;

    "setMetadata(string)"(
      _metadataCID: string,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribe(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "subscribe(address,string,uint256,bytes)"(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unsubscribe(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unsubscribe(uint256)"(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSubscriptionPrice(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateSubscriptionPrice(address,uint256)"(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256,address)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approvedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "approvedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMetadata(overrides?: CallOverrides): Promise<BigNumber>;

    "getMetadata()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSubscriptionExpiryFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscriptionExpiryFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionIdFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSubscriptionIdFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guildBalance(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "guildBalance(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasActiveSubscription(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasActiveSubscription(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,uint256,uint256,tuple,address)"(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    "initialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSubscriptionOwner(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isSubscriptionOwner(uint256,address)"(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseGuild(pause: boolean, overrides?: Overrides): Promise<BigNumber>;

    "pauseGuild(bool)"(
      pause: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMetadata(
      _metadataCID: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMetadata(string)"(
      _metadataCID: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    subscribe(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "subscribe(address,string,uint256,bytes)"(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unsubscribe(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unsubscribe(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateSubscriptionPrice(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateSubscriptionPrice(address,uint256)"(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,address)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approvedTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "approvedTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMetadata(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMetadata()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubscriptionExpiryFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubscriptionExpiryFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionIdFor(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSubscriptionIdFor(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guildBalance(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "guildBalance(address)"(
      _tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasActiveSubscription(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasActiveSubscription(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,uint256,uint256,tuple,address)"(
      _creator: string,
      _tokenAddress: string,
      _subPrice: BigNumberish,
      _subscriptionPeriod: BigNumberish,
      _metadata: {
        name: string;
        symbol: string;
        baseURI: string;
        metadataCID: string;
      },
      allowanceModule: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSubscriptionOwner(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSubscriptionOwner(uint256,address)"(
      _tokenId: BigNumberish,
      _holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseGuild(
      pause: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "pauseGuild(bool)"(
      pause: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMetadata(
      _metadataCID: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMetadata(string)"(
      _metadataCID: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    subscribe(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "subscribe(address,string,uint256,bytes)"(
      _subscriber: string,
      _tokenURI: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unsubscribe(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unsubscribe(uint256)"(
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateSubscriptionPrice(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateSubscriptionPrice(address,uint256)"(
      _tokenAddress: string,
      _newSubPrice: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,address)"(
      _tokenAddress: string,
      _amount: BigNumberish,
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
