/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IGnosisSafeInterface extends ethers.utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "signatureSplit(bytes,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "signatureSplit",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signatureSplit",
    data: BytesLike
  ): Result;

  events: {};
}

export class IGnosisSafe extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IGnosisSafeInterface;

  functions: {
    NAME(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "NAME()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    isOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    signatureSplit(
      signatures: BytesLike,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: string;
      2: string;
    }>;

    "signatureSplit(bytes,uint256)"(
      signatures: BytesLike,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: string;
      2: string;
    }>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  "NAME()"(overrides?: CallOverrides): Promise<string>;

  isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

  "isOwner(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  signatureSplit(
    signatures: BytesLike,
    pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: string;
    2: string;
  }>;

  "signatureSplit(bytes,uint256)"(
    signatures: BytesLike,
    pos: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    0: number;
    1: string;
    2: string;
  }>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    "NAME()"(overrides?: CallOverrides): Promise<string>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    signatureSplit(
      signatures: BytesLike,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: string;
      2: string;
    }>;

    "signatureSplit(bytes,uint256)"(
      signatures: BytesLike,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
      1: string;
      2: string;
    }>;
  };

  filters: {};

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    "NAME()"(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signatureSplit(
      signatures: BytesLike,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "signatureSplit(bytes,uint256)"(
      signatures: BytesLike,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "NAME()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signatureSplit(
      signatures: BytesLike,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "signatureSplit(bytes,uint256)"(
      signatures: BytesLike,
      pos: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
